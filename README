## Exercise 5, Operating Systems @ HUJI

Part 1:
1. 
       PID namespaces isolate the process ID number space, meaning that
       processes in different PID namespaces can have the same PID.  PID
       namespaces allow containers to provide functionality such as
       suspending/resuming the set of processes in the container and
       migrating the container to a new host while the processes inside
       the container maintains the same PIDs.

2. 
       Mount namespaces help to isolate the list of mounts seen by
       the processes in each namespace instance.  Thus, the processes in
       each of the mount namespace instances will see distinct single-directory hierarchies.


3. 
     Cgroups defines the container limitations such as :
     maximal number of processes, maximal usage of memory, usage of CPU, and usage of network bandwidth.

4.
    clone() - creates a new child process.
    Various parameters of this system call, specify which parts of the parent process must be copied into the child
     process and which parts will be shared between them.
    As a result, this system call can be used to create all kinds of execution entities, starting from threads and
    finishing with completely independent processes.
     The difference between Clone and fork is that Clone provides more precise
     control over what pieces of execution context are shared between
      the calling process and the child process.  For example, using
     these system calls, the caller can control whether or not the two
     processes share the virtual address space, the table of file
     descriptors, and the table of signal handlers.  

5.
    chroot system call changes the root directory of the calling process to
    that specified in path. 
    This directory will be used for pathnames beginning with /.
    The root directory is inherited by all children of the calling process.

6.
    procfs is a virtual file system created on the fly when the system boots and is dissolved at the time of the
     system shut down.
    its purpose is to contain useful information about the processes that are currently running,
    it is regarded as a control and information center for the kernel.
    Usage example of procfs:
    - The proc file system also provides a communication medium between kernel space and user space.
   
